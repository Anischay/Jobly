generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("CANDIDATE")
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  jobListings   JobListing[]
  matches       Match[]
  swipes        Swipe[]
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  title       String?
  skills      String?
  experience  String?
  education   String?
  location    String?
  website     String?
  resume      String?  // URL to stored resume
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JobListing {
  id          String   @id @default(cuid())
  title       String
  company     String
  location    String
  type        String
  description String
  requirements String
  salary      String?
  userId      String   // Employer who posted the job
  applicationsCount Int @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  matches     Match[]
  swipes      Swipe[]
}

model Match {
  id           String   @id @default(cuid())
  userId       String   // Candidate
  jobListingId String
  status       String   @default("PENDING")
  overallScore Float?
  skillMatch   Float?
  experienceMatch Float?
  cultureFit   Float?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  jobListing   JobListing @relation(fields: [jobListingId], references: [id])
}

model Swipe {
  id           String   @id @default(cuid())
  userId       String   // Candidate
  jobListingId String
  direction    String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
  jobListing   JobListing @relation(fields: [jobListingId], references: [id])

  @@unique([userId, jobListingId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserInteraction {
  id          String   @id @default(cuid())
  userId      String
  eventType   String
  targetId    String?
  targetType  String?
  metadata    String?
  timestamp   DateTime @default(now())

  @@index([userId, timestamp])
}

model FeatureUsage {
  userId      String
  featureId   String
  usageCount  Int      @default(0)
  lastUsed    DateTime @default(now())
  successRate Float    @default(0)
  timeSpent   Float    @default(0)

  @@id([userId, featureId])
  @@index([featureId, usageCount])
} 